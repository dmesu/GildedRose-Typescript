"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingInstance = void 0;
const StringWrapper_1 = require("./StringWrapper");
class Toggles {
    constructor(show) {
        this.queries = show;
        this.messages = show;
        this.variables = show;
        this.hour_glass = show;
        this.markers = show;
        this.events = show;
    }
}
function printType(value) {
    return `<${value.constructor.name}>`;
}
function getCallingMethod(additional_stack) {
    var _a;
    const re = /at ([^(]+) \(/g;
    const stack = `${new Error().stack}`;
    const lines = stack.split("\n");
    const stackDepth = 2 + additional_stack;
    const line = lines[stackDepth];
    const aRegexResult = (_a = re.exec(line)) !== null && _a !== void 0 ? _a : [];
    const name = aRegexResult[1] || aRegexResult[2];
    return name;
}
class LoggingInstance {
    constructor() {
        this.counter = 0;
        this.tabs = 0;
        this.toggles = new Toggles(true);
        this.log_stack_traces = true;
        this.log_with_timestamps = true;
        this.previous_timestamp = null;
        this.logger = console.log;
        this.timer = () => new Date();
    }
    log_to_string() {
        const stringWrapper = new StringWrapper_1.StringWrapper();
        this.log_with_timestamps = false;
        this.log_stack_traces = false;
        this.logger = (t) => stringWrapper.append(t);
        return stringWrapper;
    }
    use_markers(additional_stack, code, parameters = "") {
        if (!this.toggles.markers) {
            code();
            return;
        }
        const name = getCallingMethod(additional_stack + 1);
        let parameterText = "";
        if (typeof parameters === 'function') {
            parameterText = parameters();
        }
        else {
            parameterText = parameters;
        }
        this.log_line(`=> ${name}(${parameterText})`);
        this.withTabbing(code);
        if (typeof parameters === 'function') {
            parameterText = parameters();
        }
        else {
            parameterText = "";
        }
        this.log_line(`<= ${name}(${parameterText})`);
    }
    variable(name, value, showTypes) {
        if (!this.toggles.variables) {
            return;
        }
        let toType = (v, s = "") => '';
        if (showTypes) {
            toType = (value, spacing = " ") => `${spacing}${printType(value)}`;
        }
        if (Array.isArray(value)) {
            this.log_line(`variable: ${name}${toType(value, '')}.length = ${value.length}`);
            this.withTabbing(() => {
                value.forEach((v, i) => {
                    this.logger(`${this.getTabs()}${name}[${i}] = ${v}${toType(v)}\n`);
                });
            });
        }
        else {
            this.log_line(`variable: ${name} = ${value}${toType(value)}`);
        }
    }
    log_line(text, use_timestamps = true) {
        if (this.counter != 0) {
            this.logger("\n");
        }
        this.counter = 0;
        const timestamp = use_timestamps ? this.get_timestamp() : "";
        const output_message = `${timestamp}${this.getTabs()}${text}\n`;
        this.logger(output_message);
    }
    getTabs() {
        return "  ".repeat(this.tabs);
    }
    withTabbing(code) {
        this.tabs += 1;
        code();
        this.tabs -= 1;
    }
    hour_glass() {
        if (!this.toggles.hour_glass) {
            return;
        }
        this.counter += 1;
        if (this.counter == 1) {
            this.logger(`${this.getTabs()}.`);
        }
        else if (this.counter == 100) {
            this.logger("10\n");
            this.counter = 0;
        }
        else if (this.counter % 10 == 0) {
            const digit = (this.counter / 10);
            this.logger(`${digit}`);
        }
        else {
            this.logger(".");
        }
    }
    show_all(show) {
        this.toggles = new Toggles(show);
    }
    event(event_name) {
        if (!this.toggles.events) {
            return;
        }
        this.log_line(`event: ${event_name}`);
    }
    show_queries(show) {
        this.toggles.queries = show;
    }
    show_markers(show) {
        this.toggles.markers = show;
    }
    show_events(show) {
        this.toggles.events = show;
    }
    show_messages(show) {
        this.toggles.messages = show;
    }
    show_variables(show) {
        this.toggles.variables = show;
    }
    show_hour_glass(show) {
        this.toggles.hour_glass = show;
    }
    warning(exception) {
        const warning_stars = "*".repeat(91);
        const text = null;
        this.log_line(warning_stars, false);
        if (this.log_with_timestamps) {
            this.log_line("", true);
        }
        if (text) {
            this.log_line(`Message:${text}`, false);
        }
        if (exception) {
            let stack_trace = "";
            if (this.log_stack_traces) {
                // todo: grab stack trace
                stack_trace = exception.toString();
            }
            else {
                stack_trace = `${exception}`;
            }
            this.log_line(stack_trace, false);
        }
        this.log_line(warning_stars, false);
    }
    query(queryText) {
        if (!this.toggles.queries) {
            return;
        }
        this.log_line(`Sql: ${queryText}`);
    }
    message(messageText) {
        if (!this.toggles.messages) {
            return;
        }
        this.log_line(`message: ${messageText}`);
    }
    show_timestamps(show) {
        this.log_with_timestamps = show;
    }
    get_timestamp() {
        if (!this.log_with_timestamps) {
            return "";
        }
        const time1 = this.timer();
        const time = time1.toISOString();
        let diff_millseconds = 0;
        if (this.previous_timestamp != null) {
            diff_millseconds = time1.getTime() - this.previous_timestamp.getTime();
        }
        const diff_display = `~${String(diff_millseconds).padStart(6, "0")}ms`;
        let time_text = `${time}`.replace("T", " ").substring(0, 19);
        const timestamp = `[${time_text} ${diff_display}] `;
        this.previous_timestamp = time1;
        return timestamp;
    }
}
exports.LoggingInstance = LoggingInstance;
